package main

import (
	"fmt"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
	"image/color"
	"strconv"
	"sync"
)

// @formatter:off

// Three Additional Windows: 
// ::: ------------------------------------------------------------------------------------------------------------------------------------------------------------
func createWindow2(myApp fyne.App) fyne.Window {
	window2 := myApp.NewWindow("Classic Pi calculators")
	window2.Resize(fyne.NewSize(1900, 1600))
	outputLabel := widget.NewLabel("Classic Pi calculators, make a selection")
	outputLabel.Wrapping = fyne.TextWrapWord
	scrollContainer := container.NewScroll(outputLabel)
	scrollContainer.SetMinSize(fyne.NewSize(1900, 1100))
	
	promptLabel := widget.NewLabel("")
	inputContainer := container.NewVBox()
	inputContainer.Hide() // for Nilakantha's two input fields
	
	updateChan := make(chan uiUpdate, 100)
	
	var mu sync.Mutex // would go with: go func() { ticker  , below
	var clearOnRun bool = true

	// Main-thread-safe update function
	updateOutput := func(text string, clear bool) {
		fmt.Println("updateOutput called with:", text)
		mu.Lock()
		defer mu.Unlock()
		if clear {
			outputLabel.SetText("")
		}
		outputLabel.SetText(outputLabel.Text + text + "\n")
		scrollContainer.ScrollToBottom()
		fmt.Println("UI updated to:", outputLabel.Text)
		outputLabel.Refresh()
		scrollContainer.Refresh()
	}

	// Callback for goroutines to queue updates
	callBkPrn2canvas := func(oneLineSansCR string) {
		fmt.Println("callBkPrn2canvas sending:", oneLineSansCR)
		updateChan <- uiUpdate{text: oneLineSansCR, clear: false}
	}

/*
	// Fixed single input dialog
	getSingleInput := func(title, prompt, defaultValue string, callback func(string, bool)) {
		fmt.Println("Showing single input dialog")
		confirmed := false // Track if OK was clicked
		d := dialog.NewEntryDialog(title, prompt, func(value string) {
			fmt.Println("Single dialog OK with value:", value)
			confirmed = true
			callback(value, true)
		}, myWindow)
		d.SetText(defaultValue)
		d.SetOnClosed(func() {
			if !confirmed { // Only trigger cancel if OK wasnâ€™t clicked
				fmt.Println("Single dialog canceled")
				callback("", false)
			}
		})
		d.Show()
	}
 */


	// Dual input dialog
	getDualInput := func(title, prompt1, prompt2, default1, default2 string, callback func(string, string, bool)) {
		fmt.Println("Showing dual input dialog")
		entry1 := widget.NewEntry()
		entry1.SetText(default1)
		entry2 := widget.NewEntry()
		entry2.SetText(default2)
		submitButton := widget.NewButton("Submit", func() {
			fmt.Println("Dual dialog submitted with values:", entry1.Text, entry2.Text)
			callback(entry1.Text, entry2.Text, true)
			dialog.NewInformation("Submitted", "Values submitted", window2).Hide() // Hack to close dialog
		})
		cancelButton := widget.NewButton("Cancel", func() {
			fmt.Println("Dual dialog canceled")
			callback("", "", false)
			dialog.NewInformation("Canceled", "Dialog canceled", window2).Hide() // Hack to close dialog
		})
		form := container.NewVBox(
			widget.NewLabel(prompt1), entry1,
			widget.NewLabel(prompt2), entry2,
			container.NewHBox(submitButton, cancelButton),
		)
		d := dialog.NewCustom(title, "Close", form, window2)
		d.Resize(fyne.NewSize(400, 300))
		d.Show()
	}

	ArchimedesButton2pg1pos := NewColoredButton("modified Archimedes \n-- by Rick Woolley\n three\n four", color.RGBA{255, 100, 100, 215}, func() {
		fmt.Println("Archimedes button tapped")
		updateOutput("", clearOnRun)
		go ArchimedesBig(callBkPrn2canvas)
	})
	/* old way
		ArchimedesButton2pg1pos := NewColoredButton("Bailey chan goes here\nnot\nArchimedesBigCopy", color.RGBA{255, 100, 100, 215}, func() {
			updateChan <- updateData{clearText: true}
			go ArchimedesBig(callBkPrn2canvas)

		})
	 */


	buttonGregory := NewColoredButton("Gregory-Leibniz, is quick", color.RGBA{100, 100, 255, 165}, func() {
		fmt.Println("Archimedes button tapped")
		updateOutput("", clearOnRun)
		go GregoryLeibniz(callBkPrn2canvas)
	})
	
	// nila 3 goes here
	buttonNilakantha := NewColoredButton("Nilakantha -- takes input", color.RGBA{255, 255, 100, 235}, func() {
		fmt.Println("Archimedes button tapped")
		updateOutput("", clearOnRun)
		getDualInput("Input Required", "Number of iterations (suggest 100,000 -> 100,000,000):", "Precision (suggest 128 -> 512):", "100000", "256", func(itersStr, precStr string, ok bool) {
			if !ok {
				updateOutput("Nilakantha calculation canceled", false)
				return
			}
			iters := 100000
			precision := 256
			val1, err1 := strconv.Atoi(itersStr)
			if err1 != nil {
				fmt.Println("Error converting input1:", err1)
				fmt.Println("setting iters to 40,000,555")
				iters = 40000555
			} else {
				fmt.Println("Value of input1:", val1)
				iters = val1
			}
			val2, err2 := strconv.Atoi(precStr)
			if err2 != nil {
				fmt.Println("Error converting input2:", err2)
				fmt.Println("setting precision to 512")
				precision = 512
			} else {
				fmt.Println("Value of input2:", val2)
				precision = val2
			}
			go NilakanthaBig(callBkPrn2canvas, iters, precision)
		})
	})

	GottfriedWilhelmLeibniz2pg2pos := NewColoredButton("Gottfried Wilhelm Leibniz -- runs long", color.RGBA{100, 255, 100, 225}, func() {
		fmt.Println("Archimedes button tapped")
		updateOutput("", clearOnRun)
		go GottfriedWilhelmLeibniz(callBkPrn2canvas)
	})
	
	buttonContainer := container.NewGridWithColumns(4,
		ArchimedesButton2pg1pos, buttonNilakantha, buttonGregory, GottfriedWilhelmLeibniz2pg2pos,
	)
	
	content := container.NewVBox(buttonContainer, promptLabel, inputContainer, scrollContainer)
	window2.SetContent(content)
	// Main-thread update loop using Fyne's lifecycle
	window2.Canvas().SetOnTypedRune(func(r rune) {
		// Dummy handler to keep canvas active
	})



	// Drop-Down Menus
	logFilesMenu := fyne.NewMenu("Log Files",
		fyne.NewMenuItem("View Log 1", func() {
			// Implement log file viewing here
			dialog.ShowInformation("Log Files", "Viewing Log 1", window2)
		}),
		fyne.NewMenuItem("View Log 2", func() {
			// Implement log file viewing here
			dialog.ShowInformation("Log Files", "Viewing Log 2", window2)
		}),
	)

	windowsMenu := fyne.NewMenu("Collections",
		fyne.NewMenuItem("Fast Pi calculators", func() {
			window2.Show()
		}),
		fyne.NewMenuItem("Classic Pi calculators", func() {
			createWindow2(myApp).Show()
		}),
		fyne.NewMenuItem("Odd Pi calculators", func() {
			createWindow3(myApp).Show()
		}),
		fyne.NewMenuItem("Misc Maths", func() {
			createWindow4(myApp).Show()
		}),
	)

	informationMenu := fyne.NewMenu("Information",
		fyne.NewMenuItem("Help", func() {
			dialog.ShowInformation("Information", "Help...", window2)
		}),
		fyne.NewMenuItem("About", func() {
			dialog.ShowInformation("Information", "About...", window2)
		}),
	)

	mainMenu := fyne.NewMainMenu(logFilesMenu, windowsMenu, informationMenu)
	window2.SetMainMenu(mainMenu)

	return window2
} // end of createWindow2


// ::: ------------------------------------------------------------------------------------------------------------------------------------------------------------
func createWindow3(myApp fyne.App) fyne.Window {
	// Similar structure to createWindow2
	window3 := myApp.NewWindow("Odd Pi calculators")
	window3.Resize(fyne.NewSize(1900, 1600))
	outputLabel := widget.NewLabel("Odd Pi calculators, make a selection")
	outputLabel.Wrapping = fyne.TextWrapWord
	scrollContainer := container.NewScroll(outputLabel)
	scrollContainer.SetMinSize(fyne.NewSize(1900, 1300))
	buttonContainer := container.NewGridWithColumns(4,
		widget.NewButton("Button 9", func() {}), 
		widget.NewButton("Button 10", func() {}), 
		widget.NewButton("Button 11", func() {}), 
		widget.NewButton("Button 12", func() {}),
		widget.NewButton("Button 13", func() {}), 
		widget.NewButton("Button 14", func() {}), 
		widget.NewButton("Button 15", func() {}), 
		widget.NewButton("Button 16", func() {}),
	)
	content := container.NewVBox(buttonContainer, scrollContainer)
	window3.SetContent(content)
	return window3
}

// ::: ------------------------------------------------------------------------------------------------------------------------------------------------------------
func createWindow4(myApp fyne.App) fyne.Window {
	// Similar structure to createWindow2
	window4 := myApp.NewWindow("Misc Maths")
	window4.Resize(fyne.NewSize(1900, 1600))
	outputLabel := widget.NewLabel("Misc Maths, make a selection")
	outputLabel.Wrapping = fyne.TextWrapWord
	scrollContainer := container.NewScroll(outputLabel)
	scrollContainer.SetMinSize(fyne.NewSize(1900, 1300))
	buttonContainer := container.NewGridWithColumns(4,
		widget.NewButton("Button 17", func() {}), widget.NewButton("Button 18", func() {}), widget.NewButton("Button 19", func() {}), widget.NewButton("Button 20", func() {}),
		widget.NewButton("Button 21", func() {}), widget.NewButton("Button 22", func() {}), widget.NewButton("Button 23", func() {}), widget.NewButton("Button 24", func() {}),
	)
	content := container.NewVBox(buttonContainer, scrollContainer)
	window4.SetContent(content)
	return window4
}
